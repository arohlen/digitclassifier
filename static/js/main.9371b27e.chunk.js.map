{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["model","drawing","App","props","modelP","a","tf","state","pred","table","document","querySelectorAll","setAttribute","arr","Array","from","map","td","style","backgroundColor","image","prediction","predict","argMax","arraySync","s","toString","this","setState","r","row","insertRow","c","cell","insertCell","addEventListener","mDown","mUp","mEnter","Container","id","ref","Row","Col","md","Button","variant","onClick","clear","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAMIA,G,aAAQ,MAERC,GAAU,EA2HCC,E,kDAvHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,OALmB,sBAKV,sBAAAC,EAAA,sEACOC,IAAmB,iEAD1B,OACPN,EADO,kDAHP,EAAKO,MAAQ,CAAEC,KAAM,IAFJ,E,oDAUjB,IADM,EACFC,EAAQC,SAASC,iBAAiB,MADhC,cAGQF,GAHR,IAGN,IAAI,EAAJ,qBAAoB,SACfG,aAAa,QAAhB,4BAA8C,aAJ1C,iC,gCAUN,IAAIH,EAAQC,SAASC,iBAAiB,MAElCE,EAAMC,MAAMC,KAAKN,GAAOO,KAAK,SAACC,GAChC,MAAoC,iBAA7BA,EAAGC,MAAMC,gBAAqC,EAAI,KAGvDC,EAAQd,IAAUO,EAAI,CAAC,EAAE,GAAG,GAAG,IAE/BQ,EAAarB,EAAMsB,QAAQF,GAAOG,OAAO,GAAGC,YAAY,GAExDC,EAAI,GAGNA,EADiB,IAAfJ,EACE,eAAeA,EAAWK,WAAW,IAErC,cAAcL,EAAWK,WAAW,IAG1CC,KAAKC,UAAS,SAAArB,GAAK,MAAK,CACtBC,KAAM,IAAIiB,Q,8BAQZxB,GAAU,EACV0B,KAAKf,aAAa,QAAlB,4BAAgD,c,4BAIhDX,GAAU,I,+BAKNA,GACF0B,KAAKf,aAAa,QAAlB,4BAAgD,c,0CASlD,IAAK,IAAIiB,EAAE,EAAGA,EAAE,GAAIA,IAEhB,IADA,IAAMC,EAAMH,KAAKlB,MAAMsB,UAAUF,GACxBG,EAAE,EAAGA,EAAE,GAAIA,IAAI,CACpB,IAAMC,EAAOH,EAAII,WAAWF,GAC5BC,EAAKrB,aAAa,QAAlB,4BAAgD,YAChDqB,EAAKE,iBAAiB,YAAaR,KAAKS,OACxCH,EAAKE,iBAAiB,UAAWR,KAAKU,KACtCJ,EAAKE,iBAAiB,aAAcR,KAAKW,W,+BAKzC,IAAD,OAEP,OAEE,6BAIA,kBAACC,EAAA,EAAD,KAEA,wBAAIC,GAAG,aAAP,4FAEA,2BAAOA,GAAG,MAAMC,IAAK,SAACA,GAAD,OAAU,EAAKhC,MAAQgC,KAG1C,kBAACC,EAAA,EAAD,CAAKF,GAAG,gBACN,kBAACG,EAAA,EAAD,CAAKC,GAAI,GACT,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAW,WAAO,EAAKzB,YAAjD,YAEA,kBAACqB,EAAA,EAAD,CAAKC,GAAI,GACT,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAWpB,KAAKqB,OAA1C,WAIF,kBAACN,EAAA,EAAD,CAAKF,GAAG,aACN,kBAACG,EAAA,EAAD,KACA,4BAAKhB,KAAKpB,MAAMC,c,GA1GRyC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/C,SAASgD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9371b27e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Button , Container,Row,Col} from 'react-bootstrap';\nimport * as tf from '@tensorflow/tfjs';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nvar model = null;\n\nvar drawing = false;\n\nclass App extends Component{\n\n  constructor(props) {\n    super(props);\n    this.state = { pred: \"\" };\n  }\n\n  modelP = async () => {\n    model = await tf.loadLayersModel('https://arohlen.github.io/filehosttest/tfjs_model1/model.json');\n  }\n\n  clear() {\n    var table = document.querySelectorAll(\"td\");\n\n    for(let td of table){\n      td.setAttribute(\"style\", `background-color: ${'#000000'}`)\n    }\n  }\n\n  predict() {\n  \n    var table = document.querySelectorAll(\"td\");\n\n    var arr = Array.from(table).map( (td) => {\n      return td.style.backgroundColor === 'rgb(0, 0, 0)' ? 0 : 1;\n    })\n\n    var image = tf.tensor(arr,[1,28,28,1])\n\n    var prediction = model.predict(image).argMax(1).arraySync()[0];\n\n    var s = \"\";\n\n    if (prediction === 8) {\n      s = \"You drew an \"+prediction.toString()+\"!\";\n    }else{\n      s = \"You drew a \"+prediction.toString()+\"!\";\n    }\n\n    this.setState(state => ({\n      pred: new s\n    }));\n    //console.log(pred);\n\n  }\n\n\n  mDown () {\n    drawing = true;\n    this.setAttribute(\"style\", `background-color: ${'#FFFFFF'}`);\n  }\n\n  mUp () {\n    drawing = false;\n  }\n\n\n  mEnter () {\n    if (drawing) {\n      this.setAttribute(\"style\", `background-color: ${'#FFFFFF'}`);\n            \n    }\n  }\n\n  componentDidMount()  {\n\n    //this.modelP();\n\n    for (let r=0; r<28; r++){\n        const row = this.table.insertRow(r);\n        for (let c=0; c<28; c++){\n            const cell = row.insertCell(c);\n            cell.setAttribute(\"style\", `background-color: ${'#000000'}`);\n            cell.addEventListener(\"mousedown\", this.mDown);\n            cell.addEventListener(\"mouseup\", this.mUp);\n            cell.addEventListener(\"mouseenter\", this.mEnter);\n        }\n    }\n}\n\n  render() {\n\n    return (\n\n      <div>\n\n      \n\n      <Container>\n\n      <h3 id=\"mnisthead\">Draw a digit in the box and hit the predict button to see if the AI can tell what it is!</h3>\n\n      <table id=\"tab\" ref={(ref) => (this.table = ref)}>\n       </table>\n\n        <Row id=\"mnistbuttons\">\n          <Col md={2}>\n          <Button variant=\"primary\" onClick = {() => {this.predict()}}>Predict</Button>\n          </Col>\n          <Col md={2}>\n          <Button variant=\"primary\" onClick = {this.clear}>Clear</Button>\n          </Col>\n        </Row>\n\n        <Row id=\"mnistpred\">\n          <Col>\n          <h2>{this.state.pred}</h2>\n          </Col>\n        </Row>\n        </Container>\n      \n      \n      </div>\n\n      \n    \n    );\n    \n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}